{"version":3,"sources":["Heading.js","ButtonsPanel.js","CounterDisplay.js","Step.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","text","ButtonsPanel","className","onClick","changeValue","stepValue","resetValue","CounterDisplay","counterCurrentValue","Step","updateStepValue","event","target","value","setState","state","class","type","this","onChange","Component","Counter","addValue","prevState","counterValue","parseInt","reset","resetBool","initValue","setStep","isNaN","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAMeA,G,YAJC,SAAAC,GACZ,OAAQ,4BAAKA,EAAMC,Q,mCCWRC,EAZM,SAAAF,GAEjB,OACI,yBAAKG,UAAU,iBAAf,8BAEI,4BAAQC,QAASJ,EAAMK,aAAvB,kBAA+CL,EAAMM,WACrD,4BAAQF,QAAS,kBAAIJ,EAAMO,YAAW,KAAtC,SACA,4BAAQH,QAAS,kBAAIJ,EAAMO,YAAW,KAAtC,WCFGC,EALQ,SAAAR,GACnB,OACQ,6CAAmBA,EAAMS,sBC4BtBC,E,YA3BX,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KAOVW,gBAAkB,SAACC,GACXA,EAAMC,OAAOC,OAAS,IACtB,EAAKd,MAAMM,UAAUM,GACrB,EAAKG,SAAS,CAACT,UAAWM,EAAMC,OAAOC,UAR3C,EAAKE,MAAQ,CACTV,UAAW,GAJA,E,sEAgBf,OACI,yBAAKW,MAAM,QACP,qCACA,2BAAOC,KAAK,SAASJ,MAAOK,KAAKH,MAAMV,UACnCc,SAAUD,KAAKR,uB,GAtBhBU,aCkDJC,E,YA7CX,WAAYtB,GAAQ,IAAD,uBACf,4CAAMA,KAeVuB,SAAW,WACP,EAAKR,UAAS,SAAAS,GACV,MAAO,CAACC,aAAcD,EAAUC,aAAeC,SAAS,EAAKV,MAAMV,gBAlBxD,EAsBnBqB,MAAQ,SAAAC,GACDA,EACC,EAAKb,SAAS,CAACU,aAAc,IAE7B,EAAKV,SAAS,CAACU,aAAc,EAAKzB,MAAM6B,aA1B7B,EA8BnBC,QAAU,SAAClB,GACP,EAAKG,SAAS,CAACT,UAAWM,EAAMC,OAAOC,SA5BvC,IAAIe,EAAY,EAHD,OAKXE,MAAM,EAAK/B,MAAM6B,aACjBA,EAAYH,SAAS,EAAK1B,MAAM6B,YAGpC,EAAKb,MAAQ,CACTS,aAAcI,EACdvB,UAAW,GAXA,E,sEAmCf,OACI,yBAAKH,UAAU,WACX,kBAAC,EAAD,CAAgBM,oBAAqBU,KAAKH,MAAMS,eAChD,kBAAC,EAAD,CAAcpB,YAAac,KAAKI,SAAUhB,WAAYY,KAAKQ,MAAOrB,UAAWa,KAAKH,MAAMV,YACxF,kBAAC,EAAD,CAAMA,UAAWa,KAAKW,e,GAzChBT,aCYPW,MAXf,WACE,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAASF,KAAK,qBAEhB,kBAAC,EAAD,CAAS4B,UAAW,MCDNI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7c70448a.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nconst Heading = props => { //nazwa komponentu musi odpowiadac nazwie pliku\r\n    return (<h1>{props.text}</h1>);\r\n} \r\n\r\nexport default Heading;\r\n\r\n","import React from 'react'; //zawsze import w dwóch miejscach i eksport \r\n\r\nconst ButtonsPanel = props => { //nazwa komponentu musi odpowiadac nazwie pliku\r\n\r\n    return (\r\n        <div className=\"buttons-panel\"> \r\n            To jest panel przycisków\r\n            <button onClick={props.changeValue}>Zwiększ o {props.stepValue}</button>\r\n            <button onClick={()=>props.resetValue(true)}>Set 0</button>\r\n            <button onClick={()=>props.resetValue(false)}>Reset</button>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default ButtonsPanel;\r\n","import React from 'react'; //zawsze import w dwóch miejscach i eksport \r\n\r\nconst CounterDisplay = props => { //nazwa komponentu musi odpowiadac nazwie pliku\r\n    return(\r\n            <p>Stan licznika: {props.counterCurrentValue}</p>\r\n    )};\r\n\r\nexport default CounterDisplay;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Step extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stepValue: 1\r\n        };\r\n    }\r\n\r\n    updateStepValue = (event) => {\r\n        if (event.target.value >= 1) {\r\n            this.props.stepValue(event);\r\n            this.setState({stepValue: event.target.value})\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <div class=\"step\">\r\n                <p>Krok: </p>\r\n                <input type=\"number\" value={this.state.stepValue}\r\n                    onChange={this.updateStepValue} \r\n                ></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Step;\r\n","import React, { Component } from 'react';\r\n\r\nimport ButtonsPanel from './ButtonsPanel';\r\nimport CounterDisplay from './CounterDisplay';\r\nimport Step from './Step';\r\n\r\nclass Counter extends Component { //klasa counter DZIEDZICZY po component\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let initValue = 0;\r\n\r\n        if(!isNaN(this.props.initValue)) {\r\n            initValue = parseInt(this.props.initValue);\r\n        }\r\n\r\n        this.state = {\r\n            counterValue: initValue,\r\n            stepValue: 1\r\n        };\r\n\r\n    }\r\n\r\n    addValue = () => {\r\n        this.setState(prevState=> {\r\n            return({counterValue: prevState.counterValue + parseInt(this.state.stepValue)}) \r\n        })\r\n    }  \r\n\r\n    reset = resetBool => {\r\n        if(resetBool) {\r\n            this.setState({counterValue: 0});\r\n        } else {\r\n            this.setState({counterValue: this.props.initValue});\r\n        }\r\n    }\r\n\r\n    setStep = (event) => {\r\n        this.setState({stepValue: event.target.value});\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <div className=\"counter\">\r\n                <CounterDisplay counterCurrentValue={this.state.counterValue}/>\r\n                <ButtonsPanel changeValue={this.addValue} resetValue={this.reset} stepValue={this.state.stepValue}/>\r\n                <Step stepValue={this.setStep}/>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n\r\n//funckja zawsze cos zwraca, klasa nie zwraca, w klasie zwraca metoda","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Heading from './Heading';\r\nimport Counter from './Counter';\r\nimport Step from './Step';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\"> \r\n      <header className=\"App-header\">\r\n        <Heading text='Licznik ReactJS'/>\r\n      </header>\r\n      <Counter initValue={0}/> \r\n    </div>\r\n  ); \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}